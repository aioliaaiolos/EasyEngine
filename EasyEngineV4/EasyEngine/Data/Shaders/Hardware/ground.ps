#define MULTIMATERIAL

uniform sampler2D baseMap;
uniform sampler2D shadowMap;
uniform int TextureCount;
uniform int LightCount;
uniform float tiling;

varying vec4 vModelVertexPos;
varying vec3 N;
varying vec3 V;
varying vec2 Texcoord;
varying vec4 VertexColor;
varying float nPSMatID;

vec4 GetLightInfluence( gl_LightSourceParameters light, vec4 vPos, vec3 N, vec3 V, vec4 diffuseColor );
vec4 GetLightInfluence2( gl_LightSourceParameters light, vec4 vMatAmbient, vec4 vMatDiffuse, vec4 vMatSpecular, vec4 vMatEmissive, float fMatShininess, vec4 vModelVertexPos, vec3 N, vec3 V);
float GetAttenuationFactor( vec4 vertexPos, gl_LightSourceParameters light );

void main()
{
	gl_FragColor = vec4( 0,0,0,0);
	
	vec4 diffuseColor;
	if ( TextureCount > 0 ) {
		vec4 shadowColorColor = texture2D( shadowMap, Texcoord );
		diffuseColor = texture2D( baseMap, tiling * Texcoord );
	}
	else
		diffuseColor = gl_FrontMaterial.diffuse;
	for ( int i = 0; i < LightCount; i++ )
		gl_FragColor += GetLightInfluence( gl_LightSource[i], vModelVertexPos, N, V, diffuseColor );
}

vec4 GetLightInfluence( gl_LightSourceParameters light, vec4 vPos, vec3 N, vec3 V, vec4 diffuseColor )
{
	vec3 L = normalize(light.position - vPos).xyz;
	float alpha = acos(dot(L, light.spotDirection));
	if(alpha < light.spotCutoff) {
		vec4 vAmbient = diffuseColor * light.ambient;
		vec4 vDiffuse = max(dot(L,N), 0.) * diffuseColor * light.diffuse;
		vec3 R = reflect( -L, N );
		vec4 vSpecular = pow(max(dot(R,V),0.), gl_FrontMaterial.shininess) * gl_FrontMaterial.specular * light.specular;
		float fAttenuationFactor = GetAttenuationFactor( vPos, light );
		return fAttenuationFactor * ( vAmbient + vDiffuse + vSpecular );
	}
	return vec4(0, 0, 0, 1);
}

float GetAttenuationFactor( vec4 vertexPos, gl_LightSourceParameters light )
{
	float fDistance = distance(light.position, vertexPos);
	return 1. / ( light.constantAttenuation + light.linearAttenuation * fDistance + light.quadraticAttenuation*pow(fDistance,2.) );
}